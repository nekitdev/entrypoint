{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"entrypoint Decorated functions as entry points. In python, an entry point can be thought of as an explicit function that gets called when the script is run directly from the console. Defining an entry point requires some boilerplate code, which is abstracted away by this library. Installing Python 3.7 or above is required. pip Installing with pip is quite simple: $ pip install entrypoint Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/entrypoint.git $ cd entrypoint $ python -m pip install . poetry Adding entrypoint to dependencies: $ poetry add entrypoint Or directly specifying it in the configuration: [tool.poetry.dependencies] entrypoint = \"^1.2.1\" Alternatively, the latest version can be included, installing from source: [tool.poetry.dependencies.entrypoint] git = \"https://github.com/nekitdev/entrypoint.git\" Examples Decorated Declare main function as an entry point : from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) Run the script directly from the console: $ python file.py Hello, world! When importing the module, main does not get called: >>> import file >>> # no output Note Note that main gets called immediately, before any code below can be executed : @entrypoint ( __name__ ) def main () -> None : print ( \"-> in main\" ) print ( \"<- outside\" ) $ python note.py -> in main <- outside Direct It is possible to run main directly: entrypoint ( __name__ ) . call ( main ) This method allows to take control over where and when the function gets called. Check The library also provides is_main function that resembles the common (and standard) way of implementing entry points : from entrypoint import is_main if is_main ( __name__ ): print ( \"Hello, world!\" ) Async entrypoint does not provide any specific functionality to run async functions. Instead, you can specify, for example, a main function that runs its async_main counterpart: import asyncio async def async_main () -> None : print ( \"Hello, world!\" ) @entrypoint ( __name__ ) def main () -> None : asyncio . run ( async_main ()) Documentation Documentation is located here . Support Please send an email or refer to the official Discord server for support. Changelog Changelog can be found here . Contributing If you are interested in contributing to entrypoint , make sure to take a look at the Contributing Guide , as well as the Code of Conduct . License entrypoint is licensed under the MIT License terms. See License for details.","title":"Index"},{"location":"#entrypoint","text":"Decorated functions as entry points. In python, an entry point can be thought of as an explicit function that gets called when the script is run directly from the console. Defining an entry point requires some boilerplate code, which is abstracted away by this library.","title":"entrypoint"},{"location":"#installing","text":"Python 3.7 or above is required.","title":"Installing"},{"location":"#pip","text":"Installing with pip is quite simple: $ pip install entrypoint Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/entrypoint.git $ cd entrypoint $ python -m pip install .","title":"pip"},{"location":"#poetry","text":"Adding entrypoint to dependencies: $ poetry add entrypoint Or directly specifying it in the configuration: [tool.poetry.dependencies] entrypoint = \"^1.2.1\" Alternatively, the latest version can be included, installing from source: [tool.poetry.dependencies.entrypoint] git = \"https://github.com/nekitdev/entrypoint.git\"","title":"poetry"},{"location":"#examples","text":"","title":"Examples"},{"location":"#decorated","text":"Declare main function as an entry point : from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) Run the script directly from the console: $ python file.py Hello, world! When importing the module, main does not get called: >>> import file >>> # no output","title":"Decorated"},{"location":"#note","text":"Note that main gets called immediately, before any code below can be executed : @entrypoint ( __name__ ) def main () -> None : print ( \"-> in main\" ) print ( \"<- outside\" ) $ python note.py -> in main <- outside","title":"Note"},{"location":"#direct","text":"It is possible to run main directly: entrypoint ( __name__ ) . call ( main ) This method allows to take control over where and when the function gets called.","title":"Direct"},{"location":"#check","text":"The library also provides is_main function that resembles the common (and standard) way of implementing entry points : from entrypoint import is_main if is_main ( __name__ ): print ( \"Hello, world!\" )","title":"Check"},{"location":"#async","text":"entrypoint does not provide any specific functionality to run async functions. Instead, you can specify, for example, a main function that runs its async_main counterpart: import asyncio async def async_main () -> None : print ( \"Hello, world!\" ) @entrypoint ( __name__ ) def main () -> None : asyncio . run ( async_main ())","title":"Async"},{"location":"#documentation","text":"Documentation is located here .","title":"Documentation"},{"location":"#support","text":"Please send an email or refer to the official Discord server for support.","title":"Support"},{"location":"#changelog","text":"Changelog can be found here .","title":"Changelog"},{"location":"#contributing","text":"If you are interested in contributing to entrypoint , make sure to take a look at the Contributing Guide , as well as the Code of Conduct .","title":"Contributing"},{"location":"#license","text":"entrypoint is licensed under the MIT License terms. See License for details.","title":"License"},{"location":"reference/","text":"Decorated functions as entry points. Example # file.py from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) >>> import file >>> # no output $ python file.py Hello, world! EntryPoint Handlers for @entrypoint decorators. Source code in entrypoint\\core.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class EntryPoint : \"\"\"Handlers for [`@entrypoint`][entrypoint.core.entrypoint] decorators.\"\"\" def __init__ ( self , name : str ) -> None : self . _name = name @property def name ( self ) -> str : return self . _name def call ( self , main : M ) -> M : if is_main ( self . name ): main () return main def __call__ ( self , main : M ) -> M : return self . call ( main ) entrypoint ( name , entrypoint_type = EntryPoint ) Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the __name__ variable as an argument, and merely checks it against __main__ when needed. entrypoint_type(name) is created under the hood, and is then used to handle calls. Parameters: Name Type Description Default name str __name__ of the module required entrypoint_type Type [ EntryPoint ] EntryPoint type that is used to handle calls. EntryPoint Returns: Type Description EntryPoint An EntryPoint instance. Source code in entrypoint\\core.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def entrypoint ( name : str , entrypoint_type : Type [ EntryPoint ] = EntryPoint ) -> EntryPoint : \"\"\"Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the `__name__` variable as an argument, and merely checks it against `__main__` when needed. `entrypoint_type(name)` is created under the hood, and is then used to handle calls. Args: name: `__name__` of the module entrypoint_type: [`EntryPoint`][entrypoint.core.EntryPoint] type that is used to handle calls. Returns: An [`EntryPoint`][entrypoint.core.EntryPoint] instance. \"\"\" return entrypoint_type ( name ) is_main ( name ) Checks if name equals __main__ . Source code in entrypoint\\core.py 15 16 17 def is_main ( name : str ) -> bool : \"\"\"Checks if `name` equals `__main__`.\"\"\" return name == MAIN","title":"Reference"},{"location":"reference/#entrypoint--example","text":"# file.py from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) >>> import file >>> # no output $ python file.py Hello, world!","title":"Example"},{"location":"reference/#entrypoint.EntryPoint","text":"Handlers for @entrypoint decorators. Source code in entrypoint\\core.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class EntryPoint : \"\"\"Handlers for [`@entrypoint`][entrypoint.core.entrypoint] decorators.\"\"\" def __init__ ( self , name : str ) -> None : self . _name = name @property def name ( self ) -> str : return self . _name def call ( self , main : M ) -> M : if is_main ( self . name ): main () return main def __call__ ( self , main : M ) -> M : return self . call ( main )","title":"EntryPoint"},{"location":"reference/#entrypoint.entrypoint","text":"Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the __name__ variable as an argument, and merely checks it against __main__ when needed. entrypoint_type(name) is created under the hood, and is then used to handle calls. Parameters: Name Type Description Default name str __name__ of the module required entrypoint_type Type [ EntryPoint ] EntryPoint type that is used to handle calls. EntryPoint Returns: Type Description EntryPoint An EntryPoint instance. Source code in entrypoint\\core.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def entrypoint ( name : str , entrypoint_type : Type [ EntryPoint ] = EntryPoint ) -> EntryPoint : \"\"\"Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the `__name__` variable as an argument, and merely checks it against `__main__` when needed. `entrypoint_type(name)` is created under the hood, and is then used to handle calls. Args: name: `__name__` of the module entrypoint_type: [`EntryPoint`][entrypoint.core.EntryPoint] type that is used to handle calls. Returns: An [`EntryPoint`][entrypoint.core.EntryPoint] instance. \"\"\" return entrypoint_type ( name )","title":"entrypoint()"},{"location":"reference/#entrypoint.is_main","text":"Checks if name equals __main__ . Source code in entrypoint\\core.py 15 16 17 def is_main ( name : str ) -> bool : \"\"\"Checks if `name` equals `__main__`.\"\"\" return name == MAIN","title":"is_main()"}]}