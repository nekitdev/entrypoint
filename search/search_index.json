{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"entrypoint Decorated functions as entry points. In python, an entry point can be thought of as an explicit function that gets called when the script is run directly from the console. Defining an entry point requires some boilerplate code, which is abstracted away by this library. Installing Python 3.7 or above is required. pip Installing the library with pip is quite simple: $ pip install entrypoint Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/entrypoint.git $ cd entrypoint $ python -m pip install . poetry You can add entrypoint as a dependency with the following command: $ poetry add entrypoint Or by directly specifying it in the configuration like so: [tool.poetry.dependencies] entrypoint = \"^1.2.5\" Alternatively, you can add it directly from the source: [tool.poetry.dependencies.entrypoint] git = \"https://github.com/nekitdev/entrypoint.git\" Examples Decorated Declare the main function as an entry point : from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) Run the script directly from the console: $ python file.py Hello, world! When importing the module, main does not get called: >>> import file >>> # no output Note Note that main gets called immediately, before any code below can be executed . @entrypoint ( __name__ ) def main () -> None : print ( \"-> in main\" ) print ( \"<- outside\" ) $ python note.py -> in main <- outside Direct It is possible to run main directly: entrypoint ( __name__ ) . call ( main ) This method allows to take control over where and when the function gets called. Check entrypoint also provides is_main function that resembles the common (and de-facto standard) way of implementing entry points : from entrypoint import is_main if is_main ( __name__ ): print ( \"Hello, world!\" ) Async entrypoint does not provide any specific functionality to run async functions. Instead, you can specify, for example, a main function that runs its async_main counterpart: import asyncio async def async_main () -> None : print ( \"Hello, world!\" ) @entrypoint ( __name__ ) def main () -> None : asyncio . run ( async_main ()) Documentation You can find the documentation here . Support If you need support with the library, you can send an email or refer to the official Discord server . Changelog You can find the changelog here . Security Policy You can find the Security Policy of wraps here . Contributing If you are interested in contributing to entrypoint , make sure to take a look at the Contributing Guide , as well as the Code of Conduct . License entrypoint is licensed under the MIT License terms. See License for details.","title":"Index"},{"location":"#entrypoint","text":"Decorated functions as entry points. In python, an entry point can be thought of as an explicit function that gets called when the script is run directly from the console. Defining an entry point requires some boilerplate code, which is abstracted away by this library.","title":"entrypoint"},{"location":"#installing","text":"Python 3.7 or above is required.","title":"Installing"},{"location":"#pip","text":"Installing the library with pip is quite simple: $ pip install entrypoint Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/entrypoint.git $ cd entrypoint $ python -m pip install .","title":"pip"},{"location":"#poetry","text":"You can add entrypoint as a dependency with the following command: $ poetry add entrypoint Or by directly specifying it in the configuration like so: [tool.poetry.dependencies] entrypoint = \"^1.2.5\" Alternatively, you can add it directly from the source: [tool.poetry.dependencies.entrypoint] git = \"https://github.com/nekitdev/entrypoint.git\"","title":"poetry"},{"location":"#examples","text":"","title":"Examples"},{"location":"#decorated","text":"Declare the main function as an entry point : from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) Run the script directly from the console: $ python file.py Hello, world! When importing the module, main does not get called: >>> import file >>> # no output","title":"Decorated"},{"location":"#note","text":"Note that main gets called immediately, before any code below can be executed . @entrypoint ( __name__ ) def main () -> None : print ( \"-> in main\" ) print ( \"<- outside\" ) $ python note.py -> in main <- outside","title":"Note"},{"location":"#direct","text":"It is possible to run main directly: entrypoint ( __name__ ) . call ( main ) This method allows to take control over where and when the function gets called.","title":"Direct"},{"location":"#check","text":"entrypoint also provides is_main function that resembles the common (and de-facto standard) way of implementing entry points : from entrypoint import is_main if is_main ( __name__ ): print ( \"Hello, world!\" )","title":"Check"},{"location":"#async","text":"entrypoint does not provide any specific functionality to run async functions. Instead, you can specify, for example, a main function that runs its async_main counterpart: import asyncio async def async_main () -> None : print ( \"Hello, world!\" ) @entrypoint ( __name__ ) def main () -> None : asyncio . run ( async_main ())","title":"Async"},{"location":"#documentation","text":"You can find the documentation here .","title":"Documentation"},{"location":"#support","text":"If you need support with the library, you can send an email or refer to the official Discord server .","title":"Support"},{"location":"#changelog","text":"You can find the changelog here .","title":"Changelog"},{"location":"#security-policy","text":"You can find the Security Policy of wraps here .","title":"Security Policy"},{"location":"#contributing","text":"If you are interested in contributing to entrypoint , make sure to take a look at the Contributing Guide , as well as the Code of Conduct .","title":"Contributing"},{"location":"#license","text":"entrypoint is licensed under the MIT License terms. See License for details.","title":"License"},{"location":"changelog/","text":"Changelog 1.2.5 (2022-07-03) No significant changes. 1.2.4 (2022-06-29) No significant changes. 1.2.3 (2022-06-28) No significant changes. 1.2.2 (2022-06-28) No significant changes. 1.2.1 (2022-06-25) No significant changes. 1.2.0 (2022-06-25) Changes entrypoint.py -> entrypoint migration. ( #20 ) 1.1.2 (2022-06-24) No significant changes. 1.1.1 (2022-06-24) No significant changes. 1.1.0 (2022-06-24) Features Add documentation. 1.0.1 (2022-06-21) No significant changes. 1.0.0 (2022-06-06) Initial stable release. 0.3.1 (2022-05-25) No significant changes. 0.3.0 (2022-04-18) Changes Export the following constant: MAIN = \"__main__\" MAIN can be used to ensure entry points will always get called. ( #11 ) 0.2.0 (2022-04-17) Internal Migrate from module to library layout. ( #9 ) 0.1.3 (2022-04-17) No significant changes. 0.1.2 (2022-04-17) No significant changes. 0.1.1 (2022-04-11) No significant changes. 0.1.0 (2022-04-11) Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#125-2022-07-03","text":"No significant changes.","title":"1.2.5 (2022-07-03)"},{"location":"changelog/#124-2022-06-29","text":"No significant changes.","title":"1.2.4 (2022-06-29)"},{"location":"changelog/#123-2022-06-28","text":"No significant changes.","title":"1.2.3 (2022-06-28)"},{"location":"changelog/#122-2022-06-28","text":"No significant changes.","title":"1.2.2 (2022-06-28)"},{"location":"changelog/#121-2022-06-25","text":"No significant changes.","title":"1.2.1 (2022-06-25)"},{"location":"changelog/#120-2022-06-25","text":"","title":"1.2.0 (2022-06-25)"},{"location":"changelog/#changes","text":"entrypoint.py -> entrypoint migration. ( #20 )","title":"Changes"},{"location":"changelog/#112-2022-06-24","text":"No significant changes.","title":"1.1.2 (2022-06-24)"},{"location":"changelog/#111-2022-06-24","text":"No significant changes.","title":"1.1.1 (2022-06-24)"},{"location":"changelog/#110-2022-06-24","text":"","title":"1.1.0 (2022-06-24)"},{"location":"changelog/#features","text":"Add documentation.","title":"Features"},{"location":"changelog/#101-2022-06-21","text":"No significant changes.","title":"1.0.1 (2022-06-21)"},{"location":"changelog/#100-2022-06-06","text":"Initial stable release.","title":"1.0.0 (2022-06-06)"},{"location":"changelog/#031-2022-05-25","text":"No significant changes.","title":"0.3.1 (2022-05-25)"},{"location":"changelog/#030-2022-04-18","text":"","title":"0.3.0 (2022-04-18)"},{"location":"changelog/#changes_1","text":"Export the following constant: MAIN = \"__main__\" MAIN can be used to ensure entry points will always get called. ( #11 )","title":"Changes"},{"location":"changelog/#020-2022-04-17","text":"","title":"0.2.0 (2022-04-17)"},{"location":"changelog/#internal","text":"Migrate from module to library layout. ( #9 )","title":"Internal"},{"location":"changelog/#013-2022-04-17","text":"No significant changes.","title":"0.1.3 (2022-04-17)"},{"location":"changelog/#012-2022-04-17","text":"No significant changes.","title":"0.1.2 (2022-04-17)"},{"location":"changelog/#011-2022-04-11","text":"No significant changes.","title":"0.1.1 (2022-04-11)"},{"location":"changelog/#010-2022-04-11","text":"Initial release.","title":"0.1.0 (2022-04-11)"},{"location":"code_of_conduct/","text":"Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct . Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq . Translations are available at https://contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"code_of_conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"code_of_conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"code_of_conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"code_of_conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"code_of_conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct . Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq . Translations are available at https://contributor-covenant.org/translations .","title":"Attribution"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"reference/","text":"Reference Decorated functions as entry points. Example # file.py from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) >>> import file >>> # no output $ python file.py Hello, world! EntryPoint Handlers for @entrypoint decorators. Source code in entrypoint\\core.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class EntryPoint : \"\"\"Handlers for [`@entrypoint`][entrypoint.core.entrypoint] decorators.\"\"\" def __init__ ( self , name : str ) -> None : self . _name = name @property def name ( self ) -> str : return self . _name def call ( self , main : M ) -> M : if is_main ( self . name ): main () return main def __call__ ( self , main : M ) -> M : return self . call ( main ) is_main ( name ) Checks if name equals __main__ . Parameters: Name Type Description Default name str The name to check. required Returns: Type Description bool Whether the name is equal to __main__ . Source code in entrypoint\\core.py 15 16 17 18 19 20 21 22 23 24 def is_main ( name : str ) -> bool : \"\"\"Checks if `name` equals `__main__`. Arguments: name: The name to check. Returns: Whether the `name` is equal to `__main__`. \"\"\" return name == MAIN entrypoint ( name , entrypoint_type = EntryPoint ) Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the __name__ variable as an argument, and merely checks it against __main__ when needed. entrypoint_type(name) is created under the hood, and is then used to handle calls. Parameters: Name Type Description Default name str The __name__ of the module required entrypoint_type Type [ EntryPoint ] An EntryPoint type that is used to handle calls. EntryPoint Returns: Type Description EntryPoint An EntryPoint instance. Source code in entrypoint\\core.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def entrypoint ( name : str , entrypoint_type : Type [ EntryPoint ] = EntryPoint ) -> EntryPoint : \"\"\"Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the `__name__` variable as an argument, and merely checks it against `__main__` when needed. `entrypoint_type(name)` is created under the hood, and is then used to handle calls. Args: name: The `__name__` of the module entrypoint_type: An [`EntryPoint`][entrypoint.core.EntryPoint] type that is used to handle calls. Returns: An [`EntryPoint`][entrypoint.core.EntryPoint] instance. \"\"\" return entrypoint_type ( name )","title":"Reference"},{"location":"reference/#reference","text":"Decorated functions as entry points.","title":"Reference"},{"location":"reference/#entrypoint--example","text":"# file.py from entrypoint import entrypoint @entrypoint ( __name__ ) def main () -> None : print ( \"Hello, world!\" ) >>> import file >>> # no output $ python file.py Hello, world!","title":"Example"},{"location":"reference/#entrypoint.EntryPoint","text":"Handlers for @entrypoint decorators. Source code in entrypoint\\core.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class EntryPoint : \"\"\"Handlers for [`@entrypoint`][entrypoint.core.entrypoint] decorators.\"\"\" def __init__ ( self , name : str ) -> None : self . _name = name @property def name ( self ) -> str : return self . _name def call ( self , main : M ) -> M : if is_main ( self . name ): main () return main def __call__ ( self , main : M ) -> M : return self . call ( main )","title":"EntryPoint"},{"location":"reference/#entrypoint.is_main","text":"Checks if name equals __main__ . Parameters: Name Type Description Default name str The name to check. required Returns: Type Description bool Whether the name is equal to __main__ . Source code in entrypoint\\core.py 15 16 17 18 19 20 21 22 23 24 def is_main ( name : str ) -> bool : \"\"\"Checks if `name` equals `__main__`. Arguments: name: The name to check. Returns: Whether the `name` is equal to `__main__`. \"\"\" return name == MAIN","title":"is_main()"},{"location":"reference/#entrypoint.entrypoint","text":"Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the __name__ variable as an argument, and merely checks it against __main__ when needed. entrypoint_type(name) is created under the hood, and is then used to handle calls. Parameters: Name Type Description Default name str The __name__ of the module required entrypoint_type Type [ EntryPoint ] An EntryPoint type that is used to handle calls. EntryPoint Returns: Type Description EntryPoint An EntryPoint instance. Source code in entrypoint\\core.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def entrypoint ( name : str , entrypoint_type : Type [ EntryPoint ] = EntryPoint ) -> EntryPoint : \"\"\"Defines decorated functions as entry points. Calls the wrapped function if the module gets run directly. Instead of applying dark magic, this function expects callers to pass the `__name__` variable as an argument, and merely checks it against `__main__` when needed. `entrypoint_type(name)` is created under the hood, and is then used to handle calls. Args: name: The `__name__` of the module entrypoint_type: An [`EntryPoint`][entrypoint.core.EntryPoint] type that is used to handle calls. Returns: An [`EntryPoint`][entrypoint.core.EntryPoint] instance. \"\"\" return entrypoint_type ( name )","title":"entrypoint()"},{"location":"security/","text":"Security Policy Reporting Thank you for taking the time to responsibly disclose any problems you find. Do not file public issues as they are open for everyone to see! All security vulnerabilities in entrypoint should be reported by email to security@nekit.dev . Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report. You can encrypt your report using our public key: BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A . This key is also available on MIT's Key Server and reproduced below . After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours. Disclosure Policy entrypoint has a 5-step disclosure process: The security report is received and is assigned a primary handler. This person will coordinate the fix and release process. The problem is confirmed and a list of all affected versions is determined. Code is audited to find any potential similar problems. Fixes are prepared for all releases which are still under maintenance. These fixes are not committed to the public repository but rather held locally pending the announcement. On the embargo date, the changes are pushed to the public repository and new builds are deployed. This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner. Security Key -----BEGIN PGP PUBLIC KEY BLOCK----- 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 1oYi7ft0FnZ67Wnk5+E+ =VRe2 -----END PGP PUBLIC KEY BLOCK----- Attribution This Security Policy is adapted from Rust's Security Policy .","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#reporting","text":"Thank you for taking the time to responsibly disclose any problems you find. Do not file public issues as they are open for everyone to see! All security vulnerabilities in entrypoint should be reported by email to security@nekit.dev . Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report. You can encrypt your report using our public key: BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A . This key is also available on MIT's Key Server and reproduced below . After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.","title":"Reporting"},{"location":"security/#disclosure-policy","text":"entrypoint has a 5-step disclosure process: The security report is received and is assigned a primary handler. This person will coordinate the fix and release process. The problem is confirmed and a list of all affected versions is determined. Code is audited to find any potential similar problems. Fixes are prepared for all releases which are still under maintenance. These fixes are not committed to the public repository but rather held locally pending the announcement. On the embargo date, the changes are pushed to the public repository and new builds are deployed. This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.","title":"Disclosure Policy"},{"location":"security/#security-key","text":"-----BEGIN PGP PUBLIC KEY BLOCK----- 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 1oYi7ft0FnZ67Wnk5+E+ =VRe2 -----END PGP PUBLIC KEY BLOCK-----","title":"Security Key"},{"location":"security/#attribution","text":"This Security Policy is adapted from Rust's Security Policy .","title":"Attribution"}]}